
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `yscript.ys' --

1. Executing Verilog-2005 frontend: source/toplevel.v
Parsing Verilog input from `source/toplevel.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: source/uart.v
Parsing Verilog input from `source/uart.v' to AST representation.
Generating RTLIL representation for module `\uart_tx_serialise'.
Generating RTLIL representation for module `\uart_rx_deserialise'.
Generating RTLIL representation for module `\clock_divider'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: source/pll.v
Parsing Verilog input from `source/pll.v' to AST representation.
Generating RTLIL representation for module `\pll'.
Successfully finished Verilog frontend.

4. Executing SYNTH_ICE40 pass.

4.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_sim.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\SB_IO'.
Generating RTLIL representation for module `\SB_GB_IO'.
Generating RTLIL representation for module `\SB_GB'.
Generating RTLIL representation for module `\SB_LUT4'.
Generating RTLIL representation for module `\SB_CARRY'.
Generating RTLIL representation for module `\SB_DFF'.
Generating RTLIL representation for module `\SB_DFFE'.
Generating RTLIL representation for module `\SB_DFFSR'.
Generating RTLIL representation for module `\SB_DFFR'.
Generating RTLIL representation for module `\SB_DFFSS'.
Generating RTLIL representation for module `\SB_DFFS'.
Generating RTLIL representation for module `\SB_DFFESR'.
Generating RTLIL representation for module `\SB_DFFER'.
Generating RTLIL representation for module `\SB_DFFESS'.
Generating RTLIL representation for module `\SB_DFFES'.
Generating RTLIL representation for module `\SB_DFFN'.
Generating RTLIL representation for module `\SB_DFFNE'.
Generating RTLIL representation for module `\SB_DFFNSR'.
Generating RTLIL representation for module `\SB_DFFNR'.
Generating RTLIL representation for module `\SB_DFFNSS'.
Generating RTLIL representation for module `\SB_DFFNS'.
Generating RTLIL representation for module `\SB_DFFNESR'.
Generating RTLIL representation for module `\SB_DFFNER'.
Generating RTLIL representation for module `\SB_DFFNESS'.
Generating RTLIL representation for module `\SB_DFFNES'.
Generating RTLIL representation for module `\SB_RAM40_4K'.
Generating RTLIL representation for module `\SB_RAM40_4KNR'.
Generating RTLIL representation for module `\SB_RAM40_4KNW'.
Generating RTLIL representation for module `\SB_RAM40_4KNRNW'.
Generating RTLIL representation for module `\ICESTORM_LC'.
Generating RTLIL representation for module `\SB_PLL40_CORE'.
Generating RTLIL representation for module `\SB_PLL40_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2_PAD'.
Generating RTLIL representation for module `\SB_PLL40_2F_CORE'.
Generating RTLIL representation for module `\SB_PLL40_2F_PAD'.
Generating RTLIL representation for module `\SB_WARMBOOT'.
Generating RTLIL representation for module `\SB_SPRAM256KA'.
Generating RTLIL representation for module `\SB_HFOSC'.
Generating RTLIL representation for module `\SB_LFOSC'.
Generating RTLIL representation for module `\SB_RGBA_DRV'.
Generating RTLIL representation for module `\SB_LED_DRV_CUR'.
Generating RTLIL representation for module `\SB_RGB_DRV'.
Generating RTLIL representation for module `\SB_I2C'.
Generating RTLIL representation for module `\SB_SPI'.
Generating RTLIL representation for module `\SB_LEDDA_IP'.
Generating RTLIL representation for module `\SB_FILTER_50NS'.
Generating RTLIL representation for module `\SB_IO_I3C'.
Generating RTLIL representation for module `\SB_IO_OD'.
Generating RTLIL representation for module `\SB_MAC16'.
Generating RTLIL representation for module `\ICESTORM_RAM'.
Successfully finished Verilog frontend.

4.2. Executing HIERARCHY pass (managing design hierarchy).

4.2.1. Finding top of design hierarchy..
root of   1 design levels: pll                 
root of   0 design levels: clock_divider       
root of   0 design levels: uart_rx_deserialise 
root of   0 design levels: uart_tx_serialise   
root of   2 design levels: top                 
Automatically selected top as design top module.

4.2.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \uart_tx_serialise
Used module:     \uart_rx_deserialise
Used module:     \pll
Parameter \CLK_RATE = 24576000

4.2.3. Executing AST frontend in derive mode using pre-parsed AST for module `\uart_tx_serialise'.
Parameter \CLK_RATE = 24576000
Generating RTLIL representation for module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Parameter \CLK_RATE = 24576000

4.2.4. Executing AST frontend in derive mode using pre-parsed AST for module `\uart_rx_deserialise'.
Parameter \CLK_RATE = 24576000
Generating RTLIL representation for module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.

4.2.5. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod\uart_tx_serialise\CLK_RATE=24576000
Used module:     $paramod\uart_rx_deserialise\CLK_RATE=24576000
Used module:     \pll

4.2.6. Analyzing design hierarchy..
Top module:  \top
Used module:     $paramod\uart_tx_serialise\CLK_RATE=24576000
Used module:     $paramod\uart_rx_deserialise\CLK_RATE=24576000
Used module:     \pll
Removing unused module `\clock_divider'.
Removing unused module `\uart_rx_deserialise'.
Removing unused module `\uart_tx_serialise'.
Removed 3 unused modules.

4.3. Executing PROC pass (convert processes to netlists).

4.3.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.3.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 2 switch rules as full_case in process $proc$source/uart.v:128$417 in module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Marked 2 switch rules as full_case in process $proc$source/uart.v:34$391 in module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Marked 1 switch rules as full_case in process $proc$source/toplevel.v:56$1 in module top.
Removed a total of 0 dead cases.

4.3.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 2 redundant assignments.
Promoted 7 assignments to connections.

4.3.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:120$431'.
  Set init value: \rx_reg = 4'1111
Found init rule in `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:117$430'.
  Set init value: \serial_counter = 12'100111111111
Found init rule in `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:105$429'.
  Set init value: \state = 5'00000
Found init rule in `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:31$415'.
  Set init value: \serial_counter = 12'100111111111
Found init rule in `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:19$414'.
  Set init value: \state = 2'00

4.3.5. Executing PROC_ARST pass (detect async resets in processes).

4.3.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:120$431'.
Creating decoders for process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:117$430'.
Creating decoders for process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:105$429'.
Creating decoders for process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:128$417'.
     1/4: $0\serial_counter[11:0]
     2/4: $0\shift_counter[2:0]
     3/4: $0\shift_register[7:0]
     4/4: $0\state[4:0]
Creating decoders for process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:123$416'.
Creating decoders for process `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:31$415'.
Creating decoders for process `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:19$414'.
Creating decoders for process `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:34$391'.
     1/4: $0\serial_counter[11:0]
     2/4: $0\shift_counter[2:0]
     3/4: $0\shift_register[7:0]
     4/4: $0\state[1:0]
Creating decoders for process `\top.$proc$source/toplevel.v:56$1'.
     1/4: $0\led1[0:0]
     2/4: $0\led3[0:0]
     3/4: $0\led2[0:0]
     4/4: $0\led4[0:0]

4.3.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.3.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `$paramod\uart_rx_deserialise\CLK_RATE=24576000.\state' using process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:128$417'.
  created $dff cell `$procdff$539' with positive edge clock.
Creating register for signal `$paramod\uart_rx_deserialise\CLK_RATE=24576000.\shift_register' using process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:128$417'.
  created $dff cell `$procdff$540' with positive edge clock.
Creating register for signal `$paramod\uart_rx_deserialise\CLK_RATE=24576000.\shift_counter' using process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:128$417'.
  created $dff cell `$procdff$541' with positive edge clock.
Creating register for signal `$paramod\uart_rx_deserialise\CLK_RATE=24576000.\serial_counter' using process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:128$417'.
  created $dff cell `$procdff$542' with positive edge clock.
Creating register for signal `$paramod\uart_rx_deserialise\CLK_RATE=24576000.\rx_reg' using process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:123$416'.
  created $dff cell `$procdff$543' with positive edge clock.
Creating register for signal `$paramod\uart_tx_serialise\CLK_RATE=24576000.\state' using process `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:34$391'.
  created $dff cell `$procdff$544' with positive edge clock.
Creating register for signal `$paramod\uart_tx_serialise\CLK_RATE=24576000.\shift_register' using process `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:34$391'.
  created $dff cell `$procdff$545' with positive edge clock.
Creating register for signal `$paramod\uart_tx_serialise\CLK_RATE=24576000.\shift_counter' using process `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:34$391'.
  created $dff cell `$procdff$546' with positive edge clock.
Creating register for signal `$paramod\uart_tx_serialise\CLK_RATE=24576000.\serial_counter' using process `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:34$391'.
  created $dff cell `$procdff$547' with positive edge clock.
Creating register for signal `\top.\led1' using process `\top.$proc$source/toplevel.v:56$1'.
  created $dff cell `$procdff$548' with positive edge clock.
Creating register for signal `\top.\led2' using process `\top.$proc$source/toplevel.v:56$1'.
  created $dff cell `$procdff$549' with positive edge clock.
Creating register for signal `\top.\led3' using process `\top.$proc$source/toplevel.v:56$1'.
  created $dff cell `$procdff$550' with positive edge clock.
Creating register for signal `\top.\led4' using process `\top.$proc$source/toplevel.v:56$1'.
  created $dff cell `$procdff$551' with positive edge clock.
Creating register for signal `\top.\led5' using process `\top.$proc$source/toplevel.v:56$1'.
  created $dff cell `$procdff$552' with positive edge clock.

4.3.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:120$431'.
Removing empty process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:117$430'.
Removing empty process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:105$429'.
Found and cleaned up 7 empty switches in `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:128$417'.
Removing empty process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:128$417'.
Removing empty process `$paramod\uart_rx_deserialise\CLK_RATE=24576000.$proc$source/uart.v:123$416'.
Removing empty process `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:31$415'.
Removing empty process `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:19$414'.
Found and cleaned up 6 empty switches in `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:34$391'.
Removing empty process `$paramod\uart_tx_serialise\CLK_RATE=24576000.$proc$source/uart.v:34$391'.
Found and cleaned up 2 empty switches in `\top.$proc$source/toplevel.v:56$1'.
Removing empty process `top.$proc$source/toplevel.v:56$1'.
Cleaned up 15 empty switches.

4.4. Executing OPT_EXPR pass (perform const folding).
Optimizing module pll.
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
<suppressed ~6 debug messages>
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
<suppressed ~12 debug messages>
Optimizing module top.

4.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 48 unused wires.
<suppressed ~3 debug messages>

4.6. Executing CHECK pass (checking for obvious problems).
checking module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
checking module $paramod\uart_tx_serialise\CLK_RATE=24576000..
checking module pll..
checking module top..
Warning: Wire top.\pmod4 is used but has no driver.
Warning: Wire top.\pmod3 is used but has no driver.
Warning: Wire top.\pmod2 is used but has no driver.
found and reported 3 problems.

4.7. Executing OPT pass (performing simple optimizations).

4.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
<suppressed ~15 debug messages>
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
<suppressed ~42 debug messages>
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
<suppressed ~33 debug messages>
Removed a total of 30 cells.

4.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 2/2 on $mux $ternary$source/uart.v:168$426.
Running muxtree optimizer on module $paramod\uart_tx_serialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 1 multiplexer ports.
<suppressed ~12 debug messages>

4.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
  Optimizing cells in module $paramod\uart_tx_serialise\CLK_RATE=24576000.
  Optimizing cells in module \pll.
  Optimizing cells in module \top.
    New ctrl vector for $pmux cell $procmux$515: $auto$opt_reduce.cc:134:opt_mux$554
    New ctrl vector for $pmux cell $procmux$523: $auto$opt_reduce.cc:134:opt_mux$556
    New ctrl vector for $pmux cell $procmux$507: $auto$opt_reduce.cc:134:opt_mux$558
    New ctrl vector for $pmux cell $procmux$532: $auto$opt_reduce.cc:134:opt_mux$560
  Optimizing cells in module \top.
Performed a total of 4 changes.

4.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.7.6. Executing OPT_RMDFF pass (remove dff with constant values).
Removing $procdff$552 ($dff) from module top.
Replaced 1 DFF cells.

4.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 31 unused wires.
<suppressed ~3 debug messages>

4.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.7.9. Rerunning OPT passes. (Maybe there is more to do..)

4.7.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\uart_tx_serialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

4.7.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
  Optimizing cells in module $paramod\uart_tx_serialise\CLK_RATE=24576000.
  Optimizing cells in module \pll.
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.7.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.7.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.7.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.7.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.7.16. Finished OPT passes. (There is nothing left to do.)

4.8. Executing WREDUCE pass (reducing word size of cells).
Removed top 4 bits (of 5) from port B of cell $paramod\uart_rx_deserialise\CLK_RATE=24576000.$procmux$465_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\uart_rx_deserialise\CLK_RATE=24576000.$procmux$443_CMP0 ($eq).
Removed top 3 bits (of 5) from port B of cell $paramod\uart_rx_deserialise\CLK_RATE=24576000.$procmux$459_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell $paramod\uart_rx_deserialise\CLK_RATE=24576000.$sub$source/uart.v:136$419 ($sub).
Removed top 20 bits (of 32) from port Y of cell $paramod\uart_rx_deserialise\CLK_RATE=24576000.$sub$source/uart.v:136$419 ($sub).
Removed top 2 bits (of 3) from port B of cell $paramod\uart_rx_deserialise\CLK_RATE=24576000.$eq$source/uart.v:143$420 ($eq).
Removed top 1 bits (of 2) from mux cell $paramod\uart_rx_deserialise\CLK_RATE=24576000.$ternary$source/uart.v:160$422 ($mux).
Removed top 31 bits (of 32) from port B of cell $paramod\uart_rx_deserialise\CLK_RATE=24576000.$sub$source/uart.v:161$424 ($sub).
Removed top 28 bits (of 32) from port Y of cell $paramod\uart_rx_deserialise\CLK_RATE=24576000.$sub$source/uart.v:161$424 ($sub).
Removed top 29 bits (of 32) from mux cell $paramod\uart_rx_deserialise\CLK_RATE=24576000.$ternary$source/uart.v:161$425 ($mux).
Removed top 1 bits (of 4) from port Y of cell $paramod\uart_rx_deserialise\CLK_RATE=24576000.$sub$source/uart.v:161$424 ($sub).
Removed top 20 bits (of 32) from wire $paramod\uart_rx_deserialise\CLK_RATE=24576000.$sub$source/uart.v:136$419_Y.
Removed top 1 bits (of 2) from port B of cell $paramod\uart_tx_serialise\CLK_RATE=24576000.$procmux$502_CMP0 ($eq).
Removed top 31 bits (of 32) from port B of cell $paramod\uart_tx_serialise\CLK_RATE=24576000.$sub$source/uart.v:40$394 ($sub).
Removed top 20 bits (of 32) from port Y of cell $paramod\uart_tx_serialise\CLK_RATE=24576000.$sub$source/uart.v:40$394 ($sub).
Removed top 1 bits (of 2) from mux cell $paramod\uart_tx_serialise\CLK_RATE=24576000.$ternary$source/uart.v:63$396 ($mux).
Removed top 31 bits (of 32) from port B of cell $paramod\uart_tx_serialise\CLK_RATE=24576000.$sub$source/uart.v:64$398 ($sub).
Removed top 28 bits (of 32) from port Y of cell $paramod\uart_tx_serialise\CLK_RATE=24576000.$sub$source/uart.v:64$398 ($sub).
Removed top 29 bits (of 32) from mux cell $paramod\uart_tx_serialise\CLK_RATE=24576000.$ternary$source/uart.v:64$399 ($mux).
Removed top 29 bits (of 32) from mux cell $paramod\uart_tx_serialise\CLK_RATE=24576000.$ternary$source/uart.v:72$405 ($mux).
Removed top 1 bits (of 4) from port Y of cell $paramod\uart_tx_serialise\CLK_RATE=24576000.$sub$source/uart.v:64$398 ($sub).
Removed top 20 bits (of 32) from wire $paramod\uart_tx_serialise\CLK_RATE=24576000.$sub$source/uart.v:40$394_Y.
Removed top 2 bits (of 8) from port B of cell top.$procmux$508_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell top.$procmux$509_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell top.$procmux$510_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell top.$procmux$511_CMP0 ($eq).
Removed top 2 bits (of 8) from port B of cell top.$procmux$518_CMP0 ($eq).

4.9. Executing PEEPOPT pass (run peephole optimizers).

4.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

4.11. Executing SHARE pass (SAT-based resource sharing).

4.12. Executing TECHMAP pass (map to technology primitives).

4.12.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.12.2. Continuing TECHMAP pass.
No more expansions possible.

4.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.15. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module $paramod\uart_rx_deserialise\CLK_RATE=24576000:
  creating $macc model for $sub$source/uart.v:136$419 ($sub).
  creating $macc model for $sub$source/uart.v:161$424 ($sub).
  creating $alu model for $macc $sub$source/uart.v:161$424.
  creating $alu model for $macc $sub$source/uart.v:136$419.
  creating $alu cell for $sub$source/uart.v:136$419: $auto$alumacc.cc:485:replace_alu$563
  creating $alu cell for $sub$source/uart.v:161$424: $auto$alumacc.cc:485:replace_alu$566
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module $paramod\uart_tx_serialise\CLK_RATE=24576000:
  creating $macc model for $sub$source/uart.v:40$394 ($sub).
  creating $macc model for $sub$source/uart.v:64$398 ($sub).
  creating $alu model for $macc $sub$source/uart.v:64$398.
  creating $alu model for $macc $sub$source/uart.v:40$394.
  creating $alu cell for $sub$source/uart.v:40$394: $auto$alumacc.cc:485:replace_alu$569
  creating $alu cell for $sub$source/uart.v:64$398: $auto$alumacc.cc:485:replace_alu$572
  created 2 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module pll:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

4.16. Executing OPT pass (performing simple optimizations).

4.16.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.16.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
<suppressed ~3 debug messages>
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 1 cells.

4.16.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\uart_tx_serialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

4.16.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
  Optimizing cells in module $paramod\uart_tx_serialise\CLK_RATE=24576000.
  Optimizing cells in module \pll.
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.16.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.16.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.16.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.16.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.16.9. Rerunning OPT passes. (Maybe there is more to do..)

4.16.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\uart_tx_serialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

4.16.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
  Optimizing cells in module $paramod\uart_tx_serialise\CLK_RATE=24576000.
  Optimizing cells in module \pll.
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.16.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.16.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.16.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.16.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.16.16. Finished OPT passes. (There is nothing left to do.)

4.17. Executing FSM pass (extract and optimize FSM).

4.17.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking $paramod\uart_rx_deserialise\CLK_RATE=24576000.state as FSM state register:
    Register has an initialization value.
Not marking $paramod\uart_tx_serialise\CLK_RATE=24576000.state as FSM state register:
    Register has an initialization value.

4.17.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.17.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.17.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.17.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.17.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.17.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.17.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY pass.

4.19.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.19.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.19.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.19.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.19.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.19.6. Executing MEMORY_COLLECT pass (generating $mem cells).

4.20. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.21. Executing MEMORY_BRAM pass (mapping $mem cells to block memories).

4.22. Executing TECHMAP pass (map to technology primitives).

4.22.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/brams_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/brams_map.v' to AST representation.
Generating RTLIL representation for module `\$__ICE40_RAM4K'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M0'.
Generating RTLIL representation for module `\$__ICE40_RAM4K_M123'.
Successfully finished Verilog frontend.

4.22.2. Continuing TECHMAP pass.
No more expansions possible.

4.23. Executing ICE40_BRAMINIT pass.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
<suppressed ~1 debug messages>
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
<suppressed ~1 debug messages>
Optimizing module pll.
Optimizing module top.
<suppressed ~3 debug messages>

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 2 unused wires.
<suppressed ~2 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.26. Executing OPT pass (performing simple optimizations).

4.26.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.26.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.26.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\uart_tx_serialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

4.26.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
  Optimizing cells in module $paramod\uart_tx_serialise\CLK_RATE=24576000.
    Consolidated identical input bits for $mux cell $ternary$source/uart.v:71$402:
      Old ports: A=2'11, B=2'00, Y=$ternary$source/uart.v:71$402_Y
      New ports: A=1'1, B=1'0, Y=$ternary$source/uart.v:71$402_Y [0]
      New connections: $ternary$source/uart.v:71$402_Y [1] = $ternary$source/uart.v:71$402_Y [0]
  Optimizing cells in module $paramod\uart_tx_serialise\CLK_RATE=24576000.
  Optimizing cells in module \pll.
  Optimizing cells in module \top.
Performed a total of 1 changes.

4.26.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.26.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.26.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.26.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.26.9. Rerunning OPT passes. (Maybe there is more to do..)

4.26.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module $paramod\uart_tx_serialise\CLK_RATE=24576000..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \pll..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

4.26.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
  Optimizing cells in module $paramod\uart_tx_serialise\CLK_RATE=24576000.
  Optimizing cells in module \pll.
  Optimizing cells in module \top.
Performed a total of 0 changes.

4.26.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.26.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.26.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.26.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.26.16. Finished OPT passes. (There is nothing left to do.)

4.27. Executing ICE40_WRAPCARRY pass (wrap carries).

4.28. Executing TECHMAP pass (map to technology primitives).

4.28.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.28.2. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/arith_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_ice40_alu'.
Successfully finished Verilog frontend.

4.28.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=3 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=8\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=2\S_WIDTH=4 for cells of type $pmux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $logic_or.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=3\B_WIDTH=1\Y_WIDTH=3 for cells of type $alu.
Using extmapper simplemap for cells of type $logic_and.
Using template $paramod\_80_ice40_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=12\B_WIDTH=1\Y_WIDTH=12 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $pos.
Using template $paramod\_90_pmux\WIDTH=3\S_WIDTH=2 for cells of type $pmux.
Using template $paramod\_90_pmux\WIDTH=5\S_WIDTH=4 for cells of type $pmux.
No more expansions possible.
<suppressed ~249 debug messages>

4.29. Executing OPT pass (performing simple optimizations).

4.29.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
<suppressed ~127 debug messages>
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
<suppressed ~79 debug messages>
Optimizing module pll.
Optimizing module top.
<suppressed ~40 debug messages>

4.29.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
<suppressed ~27 debug messages>
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
<suppressed ~12 debug messages>
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
<suppressed ~87 debug messages>
Removed a total of 42 cells.

4.29.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.29.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..
Removed 28 unused cells and 246 unused wires.
<suppressed ~32 debug messages>

4.29.5. Finished fast OPT passes.

4.30. Executing ICE40_OPT pass (performing simple optimizations).

4.30.1. Running ICE40 specific optimizations.
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) $paramod\uart_rx_deserialise\CLK_RATE=24576000.$auto$alumacc.cc:485:replace_alu$563.slice[0].carry: CO=\serial_counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) $paramod\uart_rx_deserialise\CLK_RATE=24576000.$auto$alumacc.cc:485:replace_alu$566.slice[0].carry: CO=\shift_counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) $paramod\uart_tx_serialise\CLK_RATE=24576000.$auto$alumacc.cc:485:replace_alu$569.slice[0].carry: CO=\serial_counter [0]
Optimized $__ICE40_CARRY_WRAPPER cell back to logic (without SB_CARRY) $paramod\uart_tx_serialise\CLK_RATE=24576000.$auto$alumacc.cc:485:replace_alu$572.slice[0].carry: CO=\shift_counter [0]

4.30.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.30.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.30.4. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.30.6. Rerunning OPT passes. (Removed registers in this run.)

4.30.7. Running ICE40 specific optimizations.

4.30.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.30.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.30.10. Executing OPT_RMDFF pass (remove dff with constant values).

4.30.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.30.12. Finished OPT passes. (There is nothing left to do.)

4.31. Executing DFF2DFFE pass (transform $dff to $dffe where applicable).
Selected cell types for direct conversion:
  $_DFF_PP1_ -> $__DFFE_PP1
  $_DFF_PP0_ -> $__DFFE_PP0
  $_DFF_PN1_ -> $__DFFE_PN1
  $_DFF_PN0_ -> $__DFFE_PN0
  $_DFF_NP1_ -> $__DFFE_NP1
  $_DFF_NP0_ -> $__DFFE_NP0
  $_DFF_NN1_ -> $__DFFE_NN1
  $_DFF_NN0_ -> $__DFFE_NN0
  $_DFF_N_ -> $_DFFE_NP_
  $_DFF_P_ -> $_DFFE_PP_
Transforming FF to FF+Enable cells in module $paramod\uart_rx_deserialise\CLK_RATE=24576000:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1268 to $_DFFE_PP_ for $0\state[4:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1269 to $_DFFE_PP_ for $0\state[4:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1270 to $_DFFE_PP_ for $0\state[4:0] [2] -> \state [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1271 to $_DFFE_PP_ for $0\state[4:0] [3] -> \state [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1272 to $_DFFE_PP_ for $0\state[4:0] [4] -> \state [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1273 to $_DFFE_PP_ for $0\shift_register[7:0] [0] -> \shift_register [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1274 to $_DFFE_PP_ for $0\shift_register[7:0] [1] -> \shift_register [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1275 to $_DFFE_PP_ for $0\shift_register[7:0] [2] -> \shift_register [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1276 to $_DFFE_PP_ for $0\shift_register[7:0] [3] -> \shift_register [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1277 to $_DFFE_PP_ for $0\shift_register[7:0] [4] -> \shift_register [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1278 to $_DFFE_PP_ for $0\shift_register[7:0] [5] -> \shift_register [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1279 to $_DFFE_PP_ for $0\shift_register[7:0] [6] -> \shift_register [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1280 to $_DFFE_PP_ for $0\shift_register[7:0] [7] -> \shift_register [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1281 to $_DFFE_PP_ for $0\shift_counter[2:0] [0] -> \shift_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1282 to $_DFFE_PP_ for $0\shift_counter[2:0] [1] -> \shift_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$1283 to $_DFFE_PP_ for $0\shift_counter[2:0] [2] -> \shift_counter [2].
Transforming FF to FF+Enable cells in module $paramod\uart_tx_serialise\CLK_RATE=24576000:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$920 to $_DFFE_PP_ for $0\state[1:0] [0] -> \state [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$921 to $_DFFE_PP_ for $0\state[1:0] [1] -> \state [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$922 to $_DFFE_PP_ for $0\shift_register[7:0] [0] -> \shift_register [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$923 to $_DFFE_PP_ for $0\shift_register[7:0] [1] -> \shift_register [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$924 to $_DFFE_PP_ for $0\shift_register[7:0] [2] -> \shift_register [2].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$925 to $_DFFE_PP_ for $0\shift_register[7:0] [3] -> \shift_register [3].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$926 to $_DFFE_PP_ for $0\shift_register[7:0] [4] -> \shift_register [4].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$927 to $_DFFE_PP_ for $0\shift_register[7:0] [5] -> \shift_register [5].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$928 to $_DFFE_PP_ for $0\shift_register[7:0] [6] -> \shift_register [6].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$929 to $_DFFE_PP_ for $0\shift_register[7:0] [7] -> \shift_register [7].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$930 to $_DFFE_PP_ for $0\shift_counter[2:0] [0] -> \shift_counter [0].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$931 to $_DFFE_PP_ for $0\shift_counter[2:0] [1] -> \shift_counter [1].
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$932 to $_DFFE_PP_ for $0\shift_counter[2:0] [2] -> \shift_counter [2].
Transforming FF to FF+Enable cells in module pll:
Transforming FF to FF+Enable cells in module top:
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$772 to $_DFFE_PP_ for $0\led1[0:0] -> \led1.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$773 to $_DFFE_PP_ for $0\led2[0:0] -> \led2.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$774 to $_DFFE_PP_ for $0\led3[0:0] -> \led3.
  converting $_DFF_P_ cell $auto$simplemap.cc:420:simplemap_dff$775 to $_DFFE_PP_ for $0\led4[0:0] -> \led4.

4.32. Executing TECHMAP pass (map to technology primitives).

4.32.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

4.32.2. Continuing TECHMAP pass.
Using template \$_DFFE_PP_ for cells of type $_DFFE_PP_.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
No more expansions possible.
<suppressed ~61 debug messages>

4.33. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
<suppressed ~56 debug messages>
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
<suppressed ~26 debug messages>
Optimizing module pll.
Optimizing module top.
<suppressed ~8 debug messages>

4.34. Executing SIMPLEMAP pass (map simple cells to gate primitives).
Mapping $paramod\uart_rx_deserialise\CLK_RATE=24576000.$auto$alumacc.cc:485:replace_alu$563.slice[0].carry ($lut).
Mapping $paramod\uart_rx_deserialise\CLK_RATE=24576000.$auto$alumacc.cc:485:replace_alu$566.slice[0].carry ($lut).
Mapping $paramod\uart_tx_serialise\CLK_RATE=24576000.$auto$alumacc.cc:485:replace_alu$572.slice[0].carry ($lut).
Mapping $paramod\uart_tx_serialise\CLK_RATE=24576000.$auto$alumacc.cc:485:replace_alu$569.slice[0].carry ($lut).

4.35. Executing ICE40_FFINIT pass (implement FF init values).
Handling FF init values in $paramod\uart_rx_deserialise\CLK_RATE=24576000.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1295 (SB_DFF): \serial_counter [11] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1296 (SB_DFF): \rx_reg [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1269 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1270 (SB_DFFE): \state [2] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1271 (SB_DFFE): \state [3] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1268 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1272 (SB_DFFE): \state [4] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1285 (SB_DFF): \serial_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1286 (SB_DFF): \serial_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1287 (SB_DFF): \serial_counter [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1288 (SB_DFF): \serial_counter [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1289 (SB_DFF): \serial_counter [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1290 (SB_DFF): \serial_counter [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1291 (SB_DFF): \serial_counter [7] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1292 (SB_DFF): \serial_counter [8] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1293 (SB_DFF): \serial_counter [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1294 (SB_DFF): \serial_counter [10] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1297 (SB_DFF): \rx_reg [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1298 (SB_DFF): \rx_reg [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1299 (SB_DFF): \rx_reg [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$1284 (SB_DFF): \serial_counter [0] = 1
Handling FF init values in $paramod\uart_tx_serialise\CLK_RATE=24576000.
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$944 (SB_DFF): \serial_counter [11] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$933 (SB_DFF): \serial_counter [0] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$920 (SB_DFFE): \state [0] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$921 (SB_DFFE): \state [1] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$934 (SB_DFF): \serial_counter [1] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$935 (SB_DFF): \serial_counter [2] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$936 (SB_DFF): \serial_counter [3] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$937 (SB_DFF): \serial_counter [4] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$938 (SB_DFF): \serial_counter [5] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$939 (SB_DFF): \serial_counter [6] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$940 (SB_DFF): \serial_counter [7] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$941 (SB_DFF): \serial_counter [8] = 1
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$942 (SB_DFF): \serial_counter [9] = 0
FF init value for cell $auto$simplemap.cc:420:simplemap_dff$943 (SB_DFF): \serial_counter [10] = 0
Handling FF init values in pll.
Handling FF init values in top.

4.36. Executing ICE40_FFSSR pass (merge synchronous set/reset into FF cells).
Merging set/reset $_MUX_ cells into SB_FFs in $paramod\uart_rx_deserialise\CLK_RATE=24576000.
  Merging $auto$simplemap.cc:277:simplemap_mux$1177 (A=1'0, B=$procmux$433_Y [9], S=$auto$simplemap.cc:168:logic_reduce$1210) into $auto$simplemap.cc:420:simplemap_dff$1293 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$1178 (A=1'1, B=$procmux$433_Y [10], S=$auto$simplemap.cc:168:logic_reduce$1210) into $auto$simplemap.cc:420:simplemap_dff$1294 (SB_DFF).
Merging set/reset $_MUX_ cells into SB_FFs in $paramod\uart_tx_serialise\CLK_RATE=24576000.
  Merging $auto$simplemap.cc:277:simplemap_mux$785 (A=$auto$wreduce.cc:460:run$562 [9], B=1'0, S=$logic_or$source/uart.v:37$393_Y) into $auto$simplemap.cc:420:simplemap_dff$942 (SB_DFF).
  Merging $auto$simplemap.cc:277:simplemap_mux$786 (A=$auto$wreduce.cc:460:run$562 [10], B=1'0, S=$logic_or$source/uart.v:37$393_Y) into $auto$simplemap.cc:420:simplemap_dff$943 (SB_DFF).
Merging set/reset $_MUX_ cells into SB_FFs in pll.
Merging set/reset $_MUX_ cells into SB_FFs in top.

4.37. Executing ICE40_OPT pass (performing simple optimizations).

4.37.1. Running ICE40 specific optimizations.

4.37.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
<suppressed ~47 debug messages>
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
<suppressed ~49 debug messages>
Optimizing module pll.
Optimizing module top.

4.37.3. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
<suppressed ~102 debug messages>
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
<suppressed ~9 debug messages>
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 37 cells.

4.37.4. Executing OPT_RMDFF pass (remove dff with constant values).

4.37.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..
Removed 5 unused cells and 366 unused wires.
<suppressed ~8 debug messages>

4.37.6. Rerunning OPT passes. (Removed registers in this run.)

4.37.7. Running ICE40 specific optimizations.

4.37.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
<suppressed ~1 debug messages>
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.37.9. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.37.10. Executing OPT_RMDFF pass (remove dff with constant values).

4.37.11. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.37.12. Rerunning OPT passes. (Removed registers in this run.)

4.37.13. Running ICE40 specific optimizations.

4.37.14. Executing OPT_EXPR pass (perform const folding).
Optimizing module $paramod\uart_rx_deserialise\CLK_RATE=24576000.
Optimizing module $paramod\uart_tx_serialise\CLK_RATE=24576000.
Optimizing module pll.
Optimizing module top.

4.37.15. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `$paramod\uart_rx_deserialise\CLK_RATE=24576000'.
Finding identical cells in module `$paramod\uart_tx_serialise\CLK_RATE=24576000'.
Finding identical cells in module `\pll'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

4.37.16. Executing OPT_RMDFF pass (remove dff with constant values).

4.37.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
Finding unused cells or wires in module $paramod\uart_tx_serialise\CLK_RATE=24576000..
Finding unused cells or wires in module \pll..
Finding unused cells or wires in module \top..

4.37.18. Finished OPT passes. (There is nothing left to do.)

4.38. Executing TECHMAP pass (map to technology primitives).

4.38.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/latches_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/latches_map.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Successfully finished Verilog frontend.

4.38.2. Continuing TECHMAP pass.
No more expansions possible.

4.39. Executing ABC pass (technology mapping using ABC).

4.39.1. Extracting gate netlist of module `$paramod\uart_rx_deserialise\CLK_RATE=24576000' to `<abc-temp-dir>/input.blif'..
Extracted 158 gates and 198 wires to a netlist network with 38 inputs and 37 outputs.

4.39.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      41.
ABC: Participating nodes from both networks       =     125.
ABC: Participating nodes from the first network   =      43. (  81.13 % of nodes)
ABC: Participating nodes from the second network  =      82. ( 154.72 % of nodes)
ABC: Node pairs (any polarity)                    =      43. (  81.13 % of names can be moved)
ABC: Node pairs (same polarity)                   =      41. (  77.36 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.39.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       49
ABC RESULTS:        internal signals:      123
ABC RESULTS:           input signals:       38
ABC RESULTS:          output signals:       37
Removing temp directory.

4.39.2. Extracting gate netlist of module `$paramod\uart_tx_serialise\CLK_RATE=24576000' to `<abc-temp-dir>/input.blif'..
Extracted 156 gates and 203 wires to a netlist network with 45 inputs and 39 outputs.

4.39.2.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      55.
ABC: Participating nodes from both networks       =     128.
ABC: Participating nodes from the first network   =      55. (  80.88 % of nodes)
ABC: Participating nodes from the second network  =      73. ( 107.35 % of nodes)
ABC: Node pairs (any polarity)                    =      55. (  80.88 % of names can be moved)
ABC: Node pairs (same polarity)                   =      41. (  60.29 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.39.2.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       66
ABC RESULTS:        internal signals:      119
ABC RESULTS:           input signals:       45
ABC RESULTS:          output signals:       39
Removing temp directory.

4.39.3. Extracting gate netlist of module `\pll' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

4.39.4. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 42 gates and 50 wires to a netlist network with 8 inputs and 4 outputs.

4.39.4.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =       6.
ABC: Participating nodes from both networks       =      14.
ABC: Participating nodes from the first network   =       5. (  55.56 % of nodes)
ABC: Participating nodes from the second network  =       9. ( 100.00 % of nodes)
ABC: Node pairs (any polarity)                    =       5. (  55.56 % of names can be moved)
ABC: Node pairs (same polarity)                   =       4. (  44.44 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

4.39.4.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:        8
ABC RESULTS:        internal signals:       38
ABC RESULTS:           input signals:        8
ABC RESULTS:          output signals:        4
Removing temp directory.

4.40. Executing ICE40_WRAPCARRY pass (wrap carries).

4.41. Executing TECHMAP pass (map to technology primitives).

4.41.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Successfully finished Verilog frontend.

4.41.2. Continuing TECHMAP pass.
No more expansions possible.
Removed 4 unused cells and 270 unused wires.

4.42. Executing OPT_LUT pass (optimize LUTs).
Discovering LUTs.
Number of LUTs:       62
  1-LUT               12
  2-LUT               21
  3-LUT               17
  4-LUT               12

Eliminating LUTs.
Number of LUTs:       62
  1-LUT               12
  2-LUT               21
  3-LUT               17
  4-LUT               12

Combining LUTs.
Number of LUTs:       50
  1-LUT               11
  2-LUT                8
  3-LUT               10
  4-LUT               21
Discovering LUTs.
Number of LUTs:       79
  1-LUT               11
  2-LUT               29
  3-LUT               20
  4-LUT               19

Eliminating LUTs.
Number of LUTs:       79
  1-LUT               11
  2-LUT               29
  3-LUT               20
  4-LUT               19

Combining LUTs.
Number of LUTs:       69
  1-LUT               10
  2-LUT               11
  3-LUT               29
  4-LUT               19
Discovering LUTs.
Number of LUTs:        0

Eliminating LUTs.
Number of LUTs:        0

Combining LUTs.
Number of LUTs:        0
Discovering LUTs.
Number of LUTs:        8
  3-LUT                6
  4-LUT                2

Eliminating LUTs.
Number of LUTs:        8
  3-LUT                6
  4-LUT                2

Combining LUTs.
Number of LUTs:        8
  3-LUT                6
  4-LUT                2

Eliminated 0 LUTs.
Combined 22 LUTs.
<suppressed ~835 debug messages>

4.43. Executing TECHMAP pass (map to technology primitives).

4.43.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/ice40/cells_map.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/ice40/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$__DFFE_NN0'.
Generating RTLIL representation for module `\$__DFFE_NN1'.
Generating RTLIL representation for module `\$__DFFE_PN0'.
Generating RTLIL representation for module `\$__DFFE_PN1'.
Generating RTLIL representation for module `\$__DFFE_NP0'.
Generating RTLIL representation for module `\$__DFFE_NP1'.
Generating RTLIL representation for module `\$__DFFE_PP0'.
Generating RTLIL representation for module `\$__DFFE_PP1'.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.43.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11101111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00011111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00010000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'00110101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0110100110010110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011010111111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01010011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000010111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'11100011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000001100000101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'1110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001010001000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10110000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1100111011111100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000100010100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000110000001010 for cells of type $lut.
Using template $paramod\$lut\WIDTH=2\LUT=4'0100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000101001111111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111111000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000000001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111010011110001 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000100000100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111000111110100 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0001000100001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0011101010111011 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0100000000000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0000000000001101 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'10001111 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1111111111111000 for cells of type $lut.
No more expansions possible.
<suppressed ~660 debug messages>
Removed 0 unused cells and 274 unused wires.

4.44. Executing AUTONAME pass.
Renamed 680 objects in module $paramod\uart_rx_deserialise\CLK_RATE=24576000 (18 iterations).
Renamed 862 objects in module $paramod\uart_tx_serialise\CLK_RATE=24576000 (18 iterations).
Renamed 40 objects in module top (6 iterations).
<suppressed ~329 debug messages>

4.45. Executing HIERARCHY pass (managing design hierarchy).

4.45.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \pll
Used module:     $paramod\uart_rx_deserialise\CLK_RATE=24576000
Used module:     $paramod\uart_tx_serialise\CLK_RATE=24576000

4.45.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \pll
Used module:     $paramod\uart_rx_deserialise\CLK_RATE=24576000
Used module:     $paramod\uart_tx_serialise\CLK_RATE=24576000
Removed 0 unused modules.

4.46. Printing statistics.

=== $paramod\uart_rx_deserialise\CLK_RATE=24576000 ===

   Number of wires:                 62
   Number of wire bits:            115
   Number of public wires:          62
   Number of public wire bits:     115
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 93
     SB_CARRY                       11
     SB_DFF                         14
     SB_DFFE                        16
     SB_DFFSR                        1
     SB_DFFSS                        1
     SB_LUT4                        50

=== $paramod\uart_tx_serialise\CLK_RATE=24576000 ===

   Number of wires:                 68
   Number of wire bits:            150
   Number of public wires:          68
   Number of public wire bits:     150
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                105
     SB_CARRY                       11
     SB_DFF                         10
     SB_DFFE                        13
     SB_DFFSR                        2
     SB_LUT4                        69

=== pll ===

   Number of wires:                  3
   Number of wire bits:              3
   Number of public wires:           3
   Number of public wire bits:       3
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  1
     SB_PLL40_CORE                   1

=== top ===

   Number of wires:                 24
   Number of wire bits:             31
   Number of public wires:          24
   Number of public wire bits:      31
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $paramod\uart_rx_deserialise\CLK_RATE=24576000      1
     $paramod\uart_tx_serialise\CLK_RATE=24576000      1
     SB_DFFE                         4
     SB_LUT4                         8
     pll                             1

=== design hierarchy ===

   top                               1
     $paramod\uart_rx_deserialise\CLK_RATE=24576000      1
     $paramod\uart_tx_serialise\CLK_RATE=24576000      1
     pll                             1

   Number of wires:                157
   Number of wire bits:            299
   Number of public wires:         157
   Number of public wire bits:     299
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                211
     SB_CARRY                       22
     SB_DFF                         24
     SB_DFFE                        33
     SB_DFFSR                        3
     SB_DFFSS                        1
     SB_LUT4                       127
     SB_PLL40_CORE                   1

4.47. Executing CHECK pass (checking for obvious problems).
checking module $paramod\uart_rx_deserialise\CLK_RATE=24576000..
checking module $paramod\uart_tx_serialise\CLK_RATE=24576000..
checking module pll..
checking module top..
found and reported 0 problems.

4.48. Executing BLIF backend.

5. Executing JSON backend.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: 96d30f3e76, CPU: user 0.26s system 0.01s, MEM: 52.00 MB peak
Yosys 0.9+2406 (git sha1 UNKNOWN, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 32% 14x read_verilog (0 sec), 14% 20x opt_expr (0 sec), ...
